{"version":3,"sources":["App.js","index.js"],"names":["App","useState","gridApi","setGridApi","setGridColumnApi","localStorage","getItem","JSON","parse","submitData","setSubmitData","id","Name","Email","Gender","DOB","Country","City","rowData","genderValueSetter","params","e","data","target","value","api","refreshCells","dobValueSetter","date","Date","_d","toLocaleDateString","split","countryValueSetter","console","log","cityValueSetter","idValueSetter","nameValueSetter","emailValueSetter","className","style","height","width","margin","onClick","applyTransaction","add","type","selectedData","getSelectedRows","remove","forEachNode","node","selected","push","errors","key","alert","localdata","forEach","elem","stringify","setItem","headerHeight","onGridReady","columnApi","sizeColumnsToFit","rowSelection","field","resizable","pinned","checkboxSelection","sortable","filter","cellRendererFramework","border","backgroundColor","onChange","cellStyle","length","padding","x","atposition","indexOf","dotposition","lastIndexOf","background","disabled","placeholder","defaultValue","moment","format","options","keys","countryData","map","i","Math","random","headerName","src","alt","deleteRowHandler","position","zIndex","marginTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"u9g/BAqceA,MA3bf,WACE,MAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAS,MAAnD,mBAAsBG,GAAtB,WACA,EAAoCH,mBAA8C,OAApCI,aAAaC,QAAQ,aAAqB,GAAGC,KAAKC,MAAMH,aAAaC,QAAQ,eAA3H,mBAAOG,EAAP,KAAmBC,EAAnB,KAEA,EAA6BT,mBAA8C,OAApCI,aAAaC,QAAQ,aAAqB,CAC7E,CAACK,GAAI,EAAEC,KAAM,aAAaC,MAAO,2BAA2BC,OAAO,SAASC,IAAI,aAAaC,QAAQ,QAAQC,KAAM,WACnH,CAACN,GAAI,EAAEC,KAAM,kBAAkBC,MAAO,uBAAuBC,OAAO,OAAOC,IAAI,YAAYC,QAAQ,QAAQC,KAAM,QACjH,CAACN,GAAI,EAAEC,KAAM,mBAAmBC,MAAO,sBAAsBC,OAAO,SAASC,IAAI,YAAYC,QAAQ,QAAQC,KAAM,SACrHV,KAAKC,MAAMH,aAAaC,QAAQ,eAJlC,mBAAOY,EAAP,UAmDA,IAIMC,EAAoB,SAACC,EAAOC,GAEhCD,EAAOE,KAAKR,OAASO,EAAEE,OAAOC,MAI9BJ,EAAOK,IAAIC,gBAuBPC,EAAiB,SAACP,EAAOC,GAC7B,IAAIO,EAAO,IAAIC,KAAKR,EAAES,IAAIC,qBAE1BH,GADAA,EAAOA,EAAKI,MAAM,MACN,GAAG,IAAIJ,EAAK,GAAG,IAAIA,EAAK,GAEpCR,EAAOE,KAAKP,IAAMa,EAIlBR,EAAOK,IAAIC,gBAyBPO,EAAqB,SAACb,EAAOC,GAGjCD,EAAOE,KAAKN,QAAUK,EAAEE,OAAOC,MAC/BJ,EAAOE,KAAKL,KAAO,WACnBiB,QAAQC,IAAIf,GAKZA,EAAOK,IAAIC,gBA2BPU,EAAkB,SAAChB,EAAOC,GAG9BD,EAAOE,KAAKL,KAAOI,EAAEE,OAAOC,MAI5BJ,EAAOK,IAAIC,gBAkCPW,EAAgB,SAACjB,EAAOC,GAG5BD,EAAOE,KAAKX,GAAKU,EAAEE,OAAOC,MAI1BJ,EAAOK,IAAIC,gBAePY,EAAkB,SAAClB,EAAOC,GAG9BD,EAAOE,KAAKV,KAAOS,EAAEE,OAAOC,MAI5BJ,EAAOK,IAAIC,gBAePa,EAAmB,SAACnB,EAAOC,GAG/BD,EAAOE,KAAKT,MAAQQ,EAAEE,OAAOC,MAI7BJ,EAAOK,IAAIC,gBAoJb,OACE,sBAAKc,UAAU,MAAf,UACE,sBAAKA,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAAKC,OAAQ,QAA3E,UACE,cAAC,IAAD,CAAQC,QAxYQ,WAEpB3C,EAAQ4C,iBAAiB,CAACC,IAAK,CAAC,CAACpC,GAAI,KAAKC,KAAM,KAAKC,MAAO,KAAKC,OAAQ,KAAKC,IAAK,KAAKC,QAAS,KAAKC,KAAM,UAsYxEwB,MAAO,CAACG,OAAQ,aAAcI,KAAK,UAAnE,qBACA,cAAC,IAAD,CAAQP,MAAO,CAACG,OAAQ,aAAcI,KAAK,UAAUH,QA3W3D,WACE,IAAII,EAAe/C,EAAQgD,kBAC3BhD,EAAQ4C,iBAAiB,CAAEK,OAAQF,KAyW/B,kCACA,cAAC,IAAD,CAAQR,MAAO,CAACG,OAAQ,aAAcI,KAAK,UAAUH,QAvW3D,WACE,IAAI3B,EAAU,GACdhB,EAAQkD,aAAY,SAAAC,IACG,IAAlBA,EAAKC,UACNpC,EAAQqC,KAAKF,EAAK/B,SAGtBpB,EAAQ4C,iBAAiB,CAAEK,OAAQjC,KAgW/B,sCACA,cAAC,IAAD,CAAQuB,MAAO,CAACG,OAAQ,aAAcI,KAAK,UAAUH,QAtY3D,WACE,IAAI3B,EAAU,GACVsC,GAAS,EAYb,GAXAtD,EAAQkD,aAAY,SAAAC,GAClB,IAAI,IAAII,KAAOJ,EAAK/B,KACI,OAAnB+B,EAAK/B,KAAKmC,KACXJ,EAAK/B,KAAKmC,GAAO,IAGH,KAAfJ,EAAK/B,KAAKX,IAA4B,KAAjB0C,EAAK/B,KAAKV,MAA+B,KAAlByC,EAAK/B,KAAKT,OAAgC,KAAnBwC,EAAK/B,KAAKR,QAA8B,KAAhBuC,EAAK/B,KAAKP,KAA+B,KAApBsC,EAAK/B,KAAKN,SAAgC,KAAjBqC,EAAK/B,KAAKL,OACpJuC,GAAS,GAEXtC,EAAQqC,KAAKF,EAAK/B,SAEjBkC,EAGC,OAFAE,MAAM,uBACNxD,EAAQwB,eAGZhB,EAAcQ,GACd,IAAIyC,EAAY,GAChBzC,EAAQ0C,SAAQ,SAAAC,GAAI,OAAIF,EAAUJ,KAAKhD,KAAKuD,UAAUD,OACtDxD,aAAa0D,QAAQ,YAAY,IAAIJ,EAAU,MAgX3C,oBACA,eAAC,cAAD,CAAaK,aAAc,GACzBC,YAvSU,SAAC7C,GACjBjB,EAAWiB,EAAOK,KAClBrB,EAAiBgB,EAAO8C,WACxB9C,EAAOK,IAAI0C,oBAqSLC,aAAa,WACblD,QAASA,EAHX,UAIE,cAAC,eAAD,CAAcmD,MAAM,KAAKC,WAAW,EAAMC,OAAO,OAAOC,mBAAmB,EAAMC,UAAU,EAAMC,QAAQ,EAAMC,sBAxMxG,SAACvD,GACf,OAAsB,OAAnBA,EAAOE,KAAKX,GAEZ,uBAAOqC,KAAK,OAAOR,UAAU,YAAYhB,MAAM,GAAGiB,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOgB,EAAcjB,EAAOC,MAI5J,uBAAO2B,KAAK,OAAOR,UAAU,YAAYhB,MAAOJ,EAAOE,KAAKX,GAAI8B,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOgB,EAAcjB,EAAOC,OAiMxB0D,UApHjI,SAAC3D,GACpB,OAAsB,OAAnBA,EAAOE,KAAKX,GACN,CACLkE,gBAAiB,eAGlBzD,EAAOE,KAAKX,GAAGqE,QAAU,EACnB,CACLH,gBAAiB,OAGZ,CAACA,gBAAiB,kBA0GrB,cAAC,eAAD,CAAcR,MAAM,OAAOC,WAAW,EAAMC,OAAO,OAAOE,UAAU,EAAMC,QAAQ,EAAMC,sBAnL/E,SAACvD,GACjB,OAAwB,OAArBA,EAAOE,KAAKV,KAEZ,uBAAOoC,KAAK,OAAOR,UAAU,YAAYhB,MAAM,GAAGiB,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOiB,EAAgBlB,EAAOC,MAI9J,uBAAO2B,KAAK,OAAOR,UAAU,YAAYhB,MAAOJ,EAAOE,KAAKV,KAAM6B,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOiB,EAAgBlB,EAAOC,OA4KjD0D,UA3I1G,SAAC3D,GACtB,OAAwB,OAArBA,EAAOE,KAAKV,KACN,CACLqE,QAAS,EACTJ,gBAAiB,eAGlBzD,EAAOE,KAAKV,KAAKoE,QAAU,EACrB,CACLC,QAAS,EACTJ,gBAAiB,OAEZzD,EAAOE,KAAKV,KAAKoE,OAAS,EAC1B,CACLC,QAAS,EACTJ,gBAAiB,UAGZ,CAACI,QAAS,EAAEJ,gBAAiB,kBA0HhC,cAAC,eAAD,CAAcR,MAAM,QAAQC,WAAW,EAAMG,UAAU,EAAMC,QAAQ,EAAMC,sBA9JjE,SAACvD,GAClB,OAAyB,OAAtBA,EAAOE,KAAKT,MAEZ,uBAAOmC,KAAK,OAAOR,UAAU,YAAYhB,MAAM,GAAGiB,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOkB,EAAiBnB,EAAOC,MAI/J,uBAAO2B,KAAK,OAAOR,UAAU,YAAYhB,MAAOJ,EAAOE,KAAKT,MAAO4B,MAAO,CAACE,MAAO,OAAOiC,OAAO,OAAOC,gBAAgB,eAAgBC,SAAU,SAACzD,GAAD,OAAOkB,EAAiBnB,EAAOC,OAuJ/D0D,UAvG7F,SAAC3D,GACvB,GAAyB,OAAtBA,EAAOE,KAAKT,MACb,MAAO,CACLoE,QAAS,EACTJ,gBAAiB,eAGrB,GAAGzD,EAAOE,KAAKT,MAAMmE,QAAU,EAC7B,MAAO,CACLC,QAAS,EACTJ,gBAAiB,OAGrB,IAAIK,EAAE9D,EAAOE,KAAKT,MACdsE,EAAWD,EAAEE,QAAQ,KACrBC,EAAYH,EAAEI,YAAY,KAC9B,OAAIH,EAAW,GAAKE,EAAYF,EAAW,GAAKE,EAAY,GAAGH,EAAEF,OACxD,CAACC,QAAS,EAAEJ,gBAAiB,UAE/B,CAACI,QAAS,EAAEJ,gBAAiB,kBAqF9B,cAAC,eAAD,CAAcR,MAAM,SAASC,WAAW,EAAMG,UAAU,EAAMC,QAAQ,EAAMC,sBAzVjE,SAACvD,GAClB,OAAoB,OAAjBA,EAAOI,MAEN,yBAAQA,MAAM,GAAGgB,UAAU,SAASC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOF,EAAkBC,EAAOC,IAA7I,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,oBACA,wBAAQhE,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,uBAKF,yBAAQA,MAAOJ,EAAOI,MAAOgB,UAAU,SAASC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOF,EAAkBC,EAAOC,IAAzJ,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,oBACA,wBAAQhE,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,wBA2U+GuD,UAlF9F,SAAC3D,GACxB,OAA0B,OAAvBA,EAAOE,KAAKR,OACN,CACL+D,gBAAiB,eAGK,KAAvBzD,EAAOE,KAAKR,OACN,CAAC+D,gBAAiB,OAElB,CAACA,gBAAiB,kBA0ErB,cAAC,eAAD,CAAcR,MAAM,MAAMC,WAAW,EAAMG,UAAU,EAAMC,QAAQ,EAAMC,sBA1TjE,SAACvD,GACf,MAAuB,KAApBA,EAAOE,KAAKP,KAAkC,OAApBK,EAAOE,KAAKP,IAErC,cAAC,IAAD,CAAY0B,MAAO,CAACoC,gBAAiB,cAAcD,OAAQ,QAASa,YAAY,MAAMX,SAAU,SAACzD,GAAD,OAAOM,EAAeP,EAAOC,MAI7H,cAAC,IAAD,CAAYoB,MAAO,CAACoC,gBAAiB,cAAcD,OAAQ,QAASc,aAAcC,IAAOvE,EAAOI,MAAO,cAAeoE,OAAO,aAAad,SAAU,SAACzD,GAAD,OAAOM,EAAeP,EAAOC,OAmTtE0D,UAtE3F,SAAC3D,GAErB,OADAc,QAAQC,IAAIf,EAAOE,MACI,OAApBF,EAAOE,KAAKP,IACN,CACLkE,QAAS,EACTJ,gBAAiB,eAGE,KAApBzD,EAAOE,KAAKP,IACN,CACLkE,QAAS,EACTJ,gBAAiB,OAGZ,CACLI,QAAS,EACTJ,gBAAiB,kBAuDf,cAAC,eAAD,CAAcR,MAAM,UAAUC,WAAW,EAAMG,UAAU,EAAMC,QAAQ,EAAMC,sBAvRjE,SAACvD,GACnB,IAAIyE,EAAU,GACd,IAAI,IAAIC,KAAQC,EACdF,EAAQtC,KAAKuC,GAEf,IAAIxE,EAAOuE,EAAQG,KAAI,SAAAxE,GAAK,OAAI,wBAAoBA,MAAOA,EAA3B,SAAmCA,GAAtBA,MAC7C,OAAoB,OAAjBJ,EAAOI,MAEN,yBAAQA,MAAM,GAAGgB,UAAU,UAAUC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOY,EAAmBb,EAAOC,IAA/I,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,qBACClE,KAKH,yBAAQE,MAAOJ,EAAOI,MAAOgB,UAAU,UAAUC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOY,EAAmBb,EAAOC,IAA3J,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,qBACClE,MAsQgHyD,UAlD/F,SAAC3D,GACzB,OAA2B,OAAxBA,EAAOE,KAAKN,QACN,CACL6D,gBAAiB,eAGM,KAAxBzD,EAAOE,KAAKN,QACN,CACL6D,gBAAiB,OAGZ,CACLA,gBAAiB,kBAuCf,cAAC,eAAD,CAAcR,MAAM,OAAOC,WAAW,EAAMG,UAAU,EAAMC,QAAQ,EAAMC,sBAvPjE,SAACvD,GACQ,aAArBA,EAAOE,KAAKL,OACbG,EAAOE,KAAKL,KAAO,GACnBG,EAAOK,IAAIC,gBAEb,IAAImE,EAAU,GACd,GAA2B,OAAxBzE,EAAOE,KAAKN,SAA4C,KAAxBI,EAAOE,KAAKN,QAC7C,IAAI,IAAIiF,EAAE,EAAEA,EAAEF,EAAY3E,EAAOE,KAAKN,SAASgE,OAAOiB,IACpDJ,EAAQtC,KAAKwC,EAAY3E,EAAOE,KAAKN,SAASiF,IAGlD/D,QAAQC,IAAIf,GACZ,IAAIE,EAAOuE,EAAQG,KAAI,SAAAxE,GAAK,OAAI,wBAAiDA,MAAOA,EAAxD,SAAgEA,GAAnD0E,KAAKC,SAAS/E,EAAOE,KAAKX,GAAGa,MAE1E,OAAwB,OAArBJ,EAAOE,KAAKL,KAEX,yBAAQO,MAAM,GAAGgB,UAAU,OAAOC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOe,EAAgBhB,EAAOC,IAAzI,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,kBACClE,KAKH,yBAAQE,MAAOJ,EAAOE,KAAKL,KAAMuB,UAAU,OAAOC,MAAO,CAACmC,OAAO,OAAOjC,MAAM,OAAO4C,WAAY,eAAgBT,SAAU,SAACzD,GAAD,OAAOe,EAAgBhB,EAAOC,IAAzJ,UACE,wBAAQG,MAAM,GAAGgE,UAAQ,EAAzB,kBACClE,MA8N0GyD,UAlC5F,SAAC3D,GACtB,OAAwB,OAArBA,EAAOE,KAAKL,KACN,CACL4D,gBAAiB,eAGG,KAArBzD,EAAOE,KAAKL,KACN,CACL4D,gBAAiB,OAGZ,CACLA,gBAAiB,kBAuBf,cAAC,eAAD,CAAcuB,WAAW,GAAG/B,MAAM,SAASC,WAAW,EAAMK,sBAvJjD,SAACvD,GAClB,OACE,qBAAKiF,IAAI,WAAWC,IAAI,MAAM5D,OAAO,OAAOF,UAAU,SAASK,QAAS,kBArNnD,SAACzB,GACxBA,EAAOK,IAAIqB,iBAAiB,CAACK,OAAQ,CAAC/B,EAAOE,QAoNmCiF,CAAiBnF,eAyJ/F,sBAAKoB,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,KAAKC,OAAQ,QAA3E,UACA,qBAAKH,MAAO,CAAC+D,SAAU,WAAWC,OAAQ,GAAGC,UAAW,QAAxD,SACA,6BAAI,mDAEF,eAAC,cAAD,CAAa1C,aAAc,GAC3BC,YApTkB,SAAC7C,GACvBA,EAAOK,IAAI0C,oBAoTLjD,QAAST,EAFX,UAGE,cAAC,eAAD,CAAc4D,MAAM,KAAKI,UAAU,EAAMC,QAAQ,IACjD,cAAC,eAAD,CAAcL,MAAM,OAAOI,UAAU,EAAMC,QAAQ,IACnD,cAAC,eAAD,CAAcL,MAAM,QAAQI,UAAU,EAAMC,QAAQ,IACpD,cAAC,eAAD,CAAcL,MAAM,SAASI,UAAU,EAAMC,QAAQ,IACrD,cAAC,eAAD,CAAcL,MAAM,MAAMI,UAAU,EAAMC,QAAQ,IAClD,cAAC,eAAD,CAAcL,MAAM,UAAUI,UAAU,EAAMC,QAAQ,IACtD,cAAC,eAAD,CAAcL,MAAM,OAAOI,UAAU,EAAMC,QAAQ,cCxb7DiC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5c56efed.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\nimport { Button,DatePicker } from 'antd';\r\nimport moment from 'moment';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport {AgGridReact,AgGridColumn} from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\r\nimport countryData from './countriesData.json';\r\n\r\nfunction App() {\r\n  const [gridApi, setGridApi] = useState(null);\r\n  const [gridColumnApi, setGridColumnApi] = useState(null);\r\n  const [submitData, setSubmitData] = useState((localStorage.getItem('localData')===null)?[]:JSON.parse(localStorage.getItem('localData')));\r\n  \r\n  const [rowData,setRowData] = useState((localStorage.getItem('localData')===null)?[\r\n      {id: 1,Name: 'Deep Singh',Email: 'deepsingh11421@gmail.com',Gender:'Female',DOB:'23-10-1999',Country:'India',City: 'Mathura'},\r\n      {id: 2,Name: 'Akshat Mukhriya',Email: 'singh11421@gmail.com',Gender:'Male',DOB:'10-6-1999',Country:'India',City: 'Agra'},\r\n      {id: 3,Name: 'Achintya Jaiswal',Email: 'deepsingh@gmail.com',Gender:'Female',DOB:'23-2-1999',Country:'India',City: 'Agra'}\r\n  ]:JSON.parse(localStorage.getItem('localData')));\r\n\r\n  const addRowHandler = () => {\r\n    // setRowData(rowData => [...rowData,{id: '',Name: '',Email: '',Gender: '',DOB: '',Country: '',City: ''}]);\r\n    gridApi.applyTransaction({add: [{id: null,Name: null,Email: null,Gender: null,DOB: null,Country: null,City: null}]})\r\n  }\r\n\r\n  function onSubmitClicked() {\r\n    var rowData = [];\r\n    var errors = false;\r\n    gridApi.forEachNode(node => {\r\n      for(let key in node.data){\r\n        if(node.data[key] === null){\r\n          node.data[key] = '';\r\n        }\r\n      }\r\n      if(node.data.id==='' || node.data.Name==='' || node.data.Email===''|| node.data.Gender===''|| node.data.DOB===''|| node.data.Country===''|| node.data.City===''){\r\n        errors = true;\r\n      }\r\n      rowData.push(node.data)\r\n    });\r\n    if(errors){\r\n        alert('Fix the errors');\r\n        gridApi.refreshCells();\r\n        return;\r\n    }\r\n    setSubmitData(rowData);\r\n    var localdata = []\r\n    rowData.forEach(elem => localdata.push(JSON.stringify(elem)));\r\n    localStorage.setItem('localData','['+localdata+']');\r\n  }\r\n\r\n  function onRemoveSelected() {\r\n    var selectedData = gridApi.getSelectedRows();\r\n    gridApi.applyTransaction({ remove: selectedData });\r\n  }\r\n\r\n  function onRemoveUnselected() {\r\n    var rowData = [];\r\n    gridApi.forEachNode(node => {\r\n      if(node.selected === false){\r\n        rowData.push(node.data)\r\n      }\r\n    });\r\n    gridApi.applyTransaction({ remove: rowData });\r\n  }\r\n\r\n  const deleteRowHandler = (params) => {\r\n    params.api.applyTransaction({remove: [params.data]});\r\n  }\r\n\r\n  const genderValueSetter = (params,e) => {\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    params.data.Gender = e.target.value;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellGender = (params) => {\r\n    if(params.value === null){\r\n      return(\r\n        <select value='' className='gender' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => genderValueSetter(params,e)}>\r\n          <option value='' disabled>Gender</option>\r\n          <option value='Male'>Male</option>\r\n          <option value='Female'>Female</option>\r\n        </select>\r\n      )\r\n    }else{\r\n      return(\r\n        <select value={params.value} className='gender' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => genderValueSetter(params,e)}>\r\n          <option value='' disabled>Gender</option>\r\n          <option value='Male'>Male</option>\r\n          <option value='Female'>Female</option>\r\n        </select>\r\n      )\r\n    }\r\n  }\r\n\r\n  const dobValueSetter = (params,e) => {\r\n    var date = new Date(e._d).toLocaleDateString();\r\n    date = date.split('/');\r\n    date = date[1]+'-'+date[0]+'-'+date[2];\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    params.data.DOB = date;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellDOB = (params) => {\r\n    if(params.data.DOB === '' || params.data.DOB === null){\r\n      return(\r\n        <DatePicker style={{backgroundColor: 'transparent',border: 'none'}} placeholder=\"DOB\" onChange={(e) => dobValueSetter(params,e)}/>\r\n      )\r\n    }else{\r\n      return(\r\n        <DatePicker style={{backgroundColor: 'transparent',border: 'none'}} defaultValue={moment(params.value ,'DD/MM/YYYY')} format=\"DD/MM/YYYY\" onChange={(e) => dobValueSetter(params,e)}/>\r\n      )\r\n    }\r\n  }\r\n\r\n  const gridReady = (params) => {\r\n    setGridApi(params.api);\r\n    setGridColumnApi(params.columnApi);\r\n    params.api.sizeColumnsToFit();\r\n  }\r\n\r\n  const gridReadySubmit = (params) => {\r\n    params.api.sizeColumnsToFit();\r\n  }\r\n\r\n  const countryValueSetter = (params,e) => {\r\n    // console.log(params);\r\n    // var index = params.node.id;\r\n    params.data.Country = e.target.value;\r\n    params.data.City = 'rerender';\r\n    console.log(params);\r\n    // var updatedData = [...rowData];\r\n    // updatedData[parseInt(index)] = params.data;\r\n    // console.log(updatedData);\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n    // params.api.redrawRows();\r\n  }\r\n\r\n  const cellCountry = (params) => {\r\n    var options = [];\r\n    for(let keys in countryData){\r\n      options.push(keys);\r\n    }\r\n    var data = options.map(value => <option key={value} value={value}>{value}</option>)\r\n    if(params.value === null){\r\n      return(\r\n        <select value='' className='country' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => countryValueSetter(params,e)}>\r\n          <option value=\"\" disabled>Country</option>\r\n          {data}\r\n        </select>\r\n      )\r\n    }else{\r\n      return(\r\n        <select value={params.value} className='country' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => countryValueSetter(params,e)}>\r\n          <option value=\"\" disabled>Country</option>\r\n          {data}\r\n        </select>\r\n      )\r\n    }\r\n  }\r\n\r\n  const cityValueSetter = (params,e) => {\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    // console.log(index);\r\n    params.data.City = e.target.value;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellCity = (params) => {\r\n    if(params.data.City === 'rerender'){\r\n      params.data.City = '';\r\n      params.api.refreshCells();\r\n    }\r\n    var options = [];\r\n    if(params.data.Country !== null && params.data.Country !== ''){\r\n      for(let i=0;i<countryData[params.data.Country].length;i++){\r\n        options.push(countryData[params.data.Country][i]);\r\n      }\r\n    }\r\n    console.log(params)\r\n    var data = options.map(value => <option key={Math.random()+params.data.id+value} value={value}>{value}</option>)\r\n    \r\n    if(params.data.City === null){\r\n      return(\r\n        <select value='' className='city' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => cityValueSetter(params,e)}>\r\n          <option value=\"\" disabled>City</option>\r\n          {data}\r\n        </select>\r\n      )\r\n    }else{\r\n      return(\r\n        <select value={params.data.City} className='city' style={{border:'none',width:'100%',background: 'transparent'}} onChange={(e) => cityValueSetter(params,e)}>\r\n          <option value=\"\" disabled>City</option>\r\n          {data}\r\n        </select>\r\n      )\r\n    }\r\n  }\r\n\r\n  const idValueSetter = (params,e) => {\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    // console.log(index);\r\n    params.data.id = e.target.value;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellId = (params) => {\r\n   if(params.data.id === null){\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value='' style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => idValueSetter(params,e)}/>\r\n    )\r\n   }else{\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value={params.data.id} style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => idValueSetter(params,e)}/>\r\n    )\r\n   }\r\n  }\r\n\r\n  const nameValueSetter = (params,e) => {\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    // console.log(index);\r\n    params.data.Name = e.target.value;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellName = (params) => {\r\n   if(params.data.Name === null){\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value='' style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => nameValueSetter(params,e)}/>\r\n    )\r\n   }else{\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value={params.data.Name} style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => nameValueSetter(params,e)}/>\r\n    )\r\n   }\r\n  }\r\n\r\n  const emailValueSetter = (params,e) => {\r\n    // var index = rowData.findIndex(entry => entry===params.data)\r\n    // console.log(index);\r\n    params.data.Email = e.target.value;\r\n    // var updatedData = [...rowData];\r\n    // updatedData[index] = params.data;\r\n    // setRowData(updatedData);\r\n    params.api.refreshCells();\r\n  }\r\n\r\n  const cellEmail = (params) => {\r\n   if(params.data.Email === null){\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value='' style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => emailValueSetter(params,e)}/>\r\n    )\r\n   }else{\r\n    return (\r\n      <input type=\"text\" className=\"inputCell\" value={params.data.Email} style={{width: '100%',border:'none',backgroundColor:'transparent'}} onChange={(e) => emailValueSetter(params,e)}/>\r\n    )\r\n   }\r\n  }\r\n\r\n  const cellDelete = (params) => {\r\n    return(\r\n      <img src=\"/bin.png\" alt=\"DEL\" height=\"20px\" className=\"delRow\" onClick={() => deleteRowHandler(params)}/>\r\n    )\r\n  }\r\n\r\n  const nameValidation = (params) => {\r\n    if(params.data.Name === null){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.Name.length <= 0){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'red'\r\n      }\r\n    }else if(params.data.Name.length < 3){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'yellow'\r\n      }\r\n    }else{\r\n      return {padding: 0,backgroundColor: 'transparent'}\r\n    }\r\n  }\r\n\r\n  const idValidation = (params) => {\r\n    if(params.data.id === null){\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.id.length <= 0){\r\n      return {\r\n        backgroundColor: 'red'\r\n      }\r\n    }else{\r\n      return {backgroundColor: 'transparent'}\r\n    }\r\n  }\r\n\r\n  const emailValidation = (params) => {\r\n    if(params.data.Email === null){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.Email.length <= 0){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'red'\r\n      }\r\n    }\r\n    var x=params.data.Email;  \r\n    var atposition=x.indexOf(\"@\");  \r\n    var dotposition=x.lastIndexOf(\".\");  \r\n    if (atposition<1 || dotposition<atposition+2 || dotposition+2>=x.length){  \r\n      return {padding: 0,backgroundColor: 'yellow'};  \r\n    }  \r\n    return {padding: 0,backgroundColor: 'transparent'};\r\n  }\r\n\r\n  const genderValidation = (params) => {\r\n    if(params.data.Gender === null){\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.Gender === ''){\r\n      return {backgroundColor: 'red'}\r\n    }else{\r\n      return {backgroundColor: 'transparent'}\r\n    }\r\n  }\r\n\r\n  const dobValidation = (params) => {\r\n    console.log(params.data);\r\n    if(params.data.DOB === null){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.DOB === ''){\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'red'\r\n      }\r\n    }else{\r\n      return {\r\n        padding: 0,\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n  }\r\n\r\n  const countryValidation = (params) => {\r\n    if(params.data.Country === null){\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.Country === ''){\r\n      return {\r\n        backgroundColor: 'red'\r\n      }\r\n    }else{\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n  }\r\n\r\n  const cityValidation = (params) => {\r\n    if(params.data.City === null){\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n    if(params.data.City === ''){\r\n      return {\r\n        backgroundColor: 'red'\r\n      }\r\n    }else{\r\n      return {\r\n        backgroundColor: 'transparent'\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"ag-theme-alpine\" style={{ height: 280, width: 1200,margin: 'auto' }}>\r\n        <Button onClick={addRowHandler} style={{margin: '10px 20px'}} type=\"default\">Add Row</Button>\r\n        <Button style={{margin: '10px 20px'}} type=\"default\" onClick={onRemoveSelected}>Delete Selected Rows</Button>\r\n        <Button style={{margin: '10px 20px'}} type=\"default\" onClick={onRemoveUnselected}>Delete Non Selected Rows</Button>\r\n        <Button style={{margin: '10px 20px'}} type=\"default\" onClick={onSubmitClicked}>Submit</Button>\r\n        <AgGridReact headerHeight={48}\r\n          onGridReady={gridReady}\r\n          rowSelection='multiple'\r\n          rowData={rowData}>\r\n          <AgGridColumn field=\"id\" resizable={true} pinned='left' checkboxSelection={true} sortable={true} filter={true} cellRendererFramework={cellId} cellStyle={idValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"Name\" resizable={true} pinned='left' sortable={true} filter={true} cellRendererFramework={cellName} cellStyle={nameValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"Email\" resizable={true} sortable={true} filter={true} cellRendererFramework={cellEmail} cellStyle={emailValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"Gender\" resizable={true} sortable={true} filter={true} cellRendererFramework={cellGender} cellStyle={genderValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"DOB\" resizable={true} sortable={true} filter={true} cellRendererFramework={cellDOB} cellStyle={dobValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"Country\" resizable={true} sortable={true} filter={true} cellRendererFramework={cellCountry} cellStyle={countryValidation}></AgGridColumn>\r\n          <AgGridColumn field=\"City\" resizable={true} sortable={true} filter={true} cellRendererFramework={cellCity} cellStyle={cityValidation}></AgGridColumn>\r\n          <AgGridColumn headerName=\"\" field=\"delete\" resizable={true} cellRendererFramework={cellDelete}></AgGridColumn>\r\n        </AgGridReact>\r\n      </div>\r\n      \r\n      <div className=\"ag-theme-alpine\" style={{ height: 280, width: 1200,margin: 'auto' }}>\r\n      <div style={{position: 'relative',zIndex: 10,marginTop: '70px'}}>\r\n      <h3><b>Submitted Data</b></h3>\r\n      </div>\r\n        <AgGridReact headerHeight={48}\r\n        onGridReady={gridReadySubmit}\r\n          rowData={submitData}>\r\n          <AgGridColumn field=\"id\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"Name\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"Email\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"Gender\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"DOB\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"Country\" sortable={true} filter={true}></AgGridColumn>\r\n          <AgGridColumn field=\"City\" sortable={true} filter={true} ></AgGridColumn>\r\n          \r\n        </AgGridReact>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}